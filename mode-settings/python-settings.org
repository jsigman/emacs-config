* Python
#+PROPERTY: header-args:emacs-lisp :load yes

#+begin_src emacs-lisp
(require 'python)
(add-hook 'python-mode-hook 'tree-sitter-hl-mode)

(setq
 python-shell-interpreter "python3"
 python-shell-interpreter-args "-i")

(define-key python-base-mode-map (kbd "C-c C-c") nil)

(require 'python-lsp-settings)

(use-package
 highlight-indent-guides
 :straight t
 :hook (python-mode . highlight-indent-guides-mode))

(add-hook
 'python-base-mode-hook
 (lambda ()
   (mapc
    (lambda (pair) (push pair prettify-symbols-alist))
    '( ;; Syntax
      ;; ("def" .      #x2131)
      ;; ("not" .      #x2757)
      ("in" . #x2208)
      ;; ("not in" .   #x2209)
      ("return" . #x27fc) ("yield" . #x27fb)
      ;; ("for" .      #x2200)
      ;; Base Types
      ;; ("int" .      #x2124)
      ;; ("float" .    #x211d)
      ;; ("str" .      #x1d54a)
      ;; ("True" .     #x1d54b)
      ;; ("False" .    #x1d53d)
      ;; Mypy
      ;; ("Dict" .     #x1d507)
      ;; ("List" .     #x2112)
      ;; ("Tuple" .    #x2a02)
      ;; ("Set" .      #x2126)
      ;; ("Iterable" . #x1d50a)
      ;; ("Any" .      #x2754)
      ;; ("Union" .    #x22c3)
      ))))

;; python mode keymap
(define-key python-base-mode-map (kbd "C-c C-p") nil)

(use-package
 py-isort
 :straight t
 :config
 (define-key python-base-mode-map (kbd "M-I") 'py-isort-buffer))

(use-package
 pip-requirements
 :straight t
 :init
 (add-to-list
  'auto-mode-alist
  `(,(rx "requirements" (zero-or-more anything) ".in" string-end)
    . pip-requirements-mode)))
#+end_src

** Python Docstrings
#+begin_src emacs-lisp :load yes
(use-package
 buftra
 :straight
 '(buftra.el :type git :host github :repo "humitos/buftra.el"))

(use-package
 py-pyment
 :straight
 '(py-cmd-buffer.el
   :type git
   :host github
   :repo "humitos/py-cmd-buffer.el")
 :after python
 :config (setq py-pyment-options '("--output=google")))
#+end_src
