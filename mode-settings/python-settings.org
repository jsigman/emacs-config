* Python
#+begin_src emacs-lisp :load yes
(require 'python)

(setq
 python-shell-interpreter "python3"
 python-shell-interpreter-args "-i")

(define-key python-mode-map (kbd "C-c C-c") nil)

(use-package
 highlight-indent-guides
 :hook (python-mode . highlight-indent-guides-mode))

(add-hook
 'python-mode-hook
 (lambda ()
   (mapc
    (lambda (pair) (push pair prettify-symbols-alist))
    '( ;; Syntax
      ;; ("def" .      #x2131)
      ;; ("not" .      #x2757)
      ("in" . #x2208)
      ;; ("not in" .   #x2209)
      ("return" . #x27fc) ("yield" . #x27fb)
      ;; ("for" .      #x2200)
      ;; Base Types
      ;; ("int" .      #x2124)
      ;; ("float" .    #x211d)
      ;; ("str" .      #x1d54a)
      ;; ("True" .     #x1d54b)
      ;; ("False" .    #x1d53d)
      ;; Mypy
      ;; ("Dict" .     #x1d507)
      ;; ("List" .     #x2112)
      ;; ("Tuple" .    #x2a02)
      ;; ("Set" .      #x2126)
      ;; ("Iterable" . #x1d50a)
      ;; ("Any" .      #x2754)
      ;; ("Union" .    #x22c3)
      ))))

;; python mode keymap
(define-key python-mode-map (kbd "C-c C-p") nil)

(use-package
 pip-requirements
 :init
 (add-to-list
  'auto-mode-alist
  `(,(rx "requirements" (zero-or-more anything) ".in" string-end)
    . pip-requirements-mode)))
#+end_src

** Python Docstrings
#+begin_src emacs-lisp :load no
(use-package
 buftra
 :straight
 '(buftra.el :type git :host github :repo "humitos/buftra.el"))

(use-package
 py-pyment
 :straight
 '(py-cmd-buffer.el
   :type git
   :host github
   :repo "humitos/py-cmd-buffer.el")
 :after python
 :config (setq py-pyment-options '("--output=google")))
#+end_src

** MsPyls LSP
Not using this in favor of Pyright
#+begin_src emacs-lisp :load no
(use-package
 lsp-python-ms
 :config
 (setq lsp-python-ms-cache "System")
 (setq lsp-python-ms-completion-add-brackets t)
 (setq lsp-python-ms-nupkg-channel "beta")
 (setq lsp-python-ms-log-level "Warning")
 (setq lsp-document-sync-method nil)
 (setq lsp-auto-execute-action nil)

 (setq lsp-python-ms-auto-install-server t)

 (add-to-list 'company-lsp-filter-candidates '(mspyls . t)))
#+end_src

** Pyright LSP
#+begin_src emacs-lisp :load no
(add-hook 'python-mode-hook #'lsp-deferred)
(setq lsp-diagnostics-disabled-modes
      '(python-mode python-mode python-ts-mode))
(use-package
  lsp-pyright
  :straight
  '(lsp-pyright :type git :host github :repo "emacs-lsp/lsp-pyright")
  :init (setq lsp-pyright-multi-root nil)
  (setq lsp-pyright-auto-import-completions nil)
  (setq lsp-pyright-diagnostic-mode "workspace")
  (setq lsp-pyright-typechecking-mode "basic")
  (setq lsp-pyright-disable-organize-imports t)
  :config (setq lsp-pyright-log-level "trace"))
#+end_src

** Copying lines as a single line for pasting into the pdbpp debugger
#+begin_src emacs-lisp :load yes
(defun python-multiline-to-singleline ()
  "Convert multi-line Python code in the current region to a single line with single spaces."
  (interactive)
  (when (use-region-p)
    (let* ((start (region-beginning))
           (end (region-end))
           (multi-line-code (buffer-substring start end))
           (single-line-code (replace-regexp-in-string "[ \t\n]+" " " multi-line-code)))
      (kill-new single-line-code)
      (message "Single-line code copied to kill ring."))))

(with-eval-after-load 'python
  (define-key python-mode-map (kbd "C-c C-l") 'python-multiline-to-singleline))
#+end_src
