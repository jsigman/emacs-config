* Projectile
#+begin_src emacs-lisp :load yes
(use-package
 projectile
 :init (setq projectile-git-submodule-command nil)
 ;; always ignore the home directory and root
 (setq projectile-ignored-projects
       `("/" "~/" ,(expand-file-name "~/")))

 (setq projectile-track-known-projects-automatically nil)

 ;; Use alien as the default, and project-wise add other files
 (setq projectile-indexing-method 'native)
 (setq projectile-enable-caching t)
 (setq projectile-files-cache-expire 300)
 (setq projectile-file-exists-remote-cache-expire nil)

 :config
 (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
 (define-key
  projectile-mode-map (kbd "C-c p") 'projectile-command-map)
 (define-key projectile-mode-map (kbd "M-K") 'projectile-kill-buffers)

 (add-to-list 'projectile-globally-ignored-directories "/venv")
 (add-to-list 'projectile-globally-ignored-directories "/data")
 (add-to-list 'projectile-globally-ignored-directories "/typings")
 (add-to-list 'projectile-globally-ignored-directories "/node_modules")
 (add-to-list 'projectile-globally-ignored-directories "/.mypy_cache")
 (add-to-list
  'projectile-globally-ignored-directories "/.pytest_cache")
 (add-to-list 'projectile-globally-ignored-directories "/.cache")
 (add-to-list 'projectile-globally-ignored-directories "/.dvc/cache")
 (add-to-list 'projectile-globally-ignored-directories "/.dvc/tmp")
 (add-to-list
  'projectile-globally-ignored-directories "/.jekyll-cache")
 (projectile-mode +1)
 ;; (add-hook 'magit-run-section-hook 'projectile-invalidate-cache)
 (add-hook
  'magit-section-post-command-hook 'projectile-invalidate-cache)
)
#+end_src
* Project.el
I'm trying migrating from ~projectile~ onto ~project.el~ for its purported benefits.
#+begin_src emacs-lisp :load yes
;; Configure project.el settings
(use-package
 project
 ;; :init
 ;; ;; Set the file where bookmarks are saved
 ;; (setq bookmark-default-file "~/.emacs.d/bookmarks")
 ;; ;; Load bookmarks at startup
 ;; (setq bookmark-save-flag 1) ; Automatically save bookmarks to the file on change
 ;; :bind
 ;; (("C-c p p" . project-switch-project)
 ;;  ("C-c p f" . project-find-file)
 ;;  ;; Add a custom binding for bookmarking the current project
 ;;  ("C-c p b" . my-project-bookmark-current))
 ;; :config
 ;; (defun my-project-bookmark-current ()
 ;;   "Bookmark the current project."
 ;;   (interactive)
 ;;   (let ((project-root (project-current)))
 ;;     (if project-root
 ;;         (bookmark-set
 ;;          (format "project-%s"
 ;;                  (file-name-nondirectory
 ;;                   (directory-file-name project-root))))
 ;;       (message "No project is active right now."))))
 )
#+end_src
