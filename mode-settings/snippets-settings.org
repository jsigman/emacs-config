* Snippets
#+PROPERTY: header-args:elisp :load yes

#+BEGIN_SRC elisp :load yes
(use-package yasnippet :straight t :demand t)
(require 'yasnippet)
;; (print yasnippet-snippets-dir)
;; (debug-on-variable-change yasnippet-snippets-dir)
(use-package yasnippet-snippets :straight t :demand t)
;; (setq yas-snippet-dirs
;;       '(yasnippet-snippets-dir "/Users/jsigman/.emacs.d/snippets"))
(yas-global-mode 1)

;; (let* ((new-snippet (yas-snippet-dirs)))
;;   (setq yasnippet-snippets-dir new-snippet))

;; Configure Tempel
;; (use-package
;;  tempel
;;  ;; Require trigger prefix before template name when completing.
;;  ;; :custom
;;  ;; (tempel-trigger-prefix "<")
;;  :straight t
;;  :bind
;;  (("M-+" . tempel-complete) ;; Alternative tempel-expand
;;   ("M-*" . tempel-insert))

;;  :init

;;  ;; Setup completion at point
;;  (defun tempel-setup-capf ()
;;    ;; Add the Tempel Capf to `completion-at-point-functions'.
;;    ;; `tempel-expand' only triggers on exact matches. Alternatively use
;;    ;; `tempel-complete' if you want to see all matches, but then you
;;    ;; should also configure `tempel-trigger-prefix', such that Tempel
;;    ;; does not trigger too often when you don't expect it. NOTE: We add
;;    ;; `tempel-expand' *before* the main programming mode Capf, such
;;    ;; that it will be tried first.
;;    (setq-local completion-at-point-functions
;;                (cons #'tempel-expand completion-at-point-functions)))

;;  (add-hook 'prog-mode-hook 'tempel-setup-capf)
;;  (add-hook 'text-mode-hook 'tempel-setup-capf)

;;  ;; Optionally make the Tempel templates available to Abbrev,
;;  ;; either locally or globally. `expand-abbrev' is bound to C-x '.
;;  ;; (add-hook 'prog-mode-hook #'tempel-abbrev-mode)
;;  ;; (global-tempel-abbrev-mode)
;;  :config
;;  ;; Optional: Add tempel-collection.
;;  ;; The package is young and doesn't have comprehensive coverage.
;;  (use-package tempel-collection :straight t :demand t))


(provide 'snippets-settings)
#+END_SRC
