* Modeline
#+PROPERTY: header-args:elisp :load yes

#+BEGIN_SRC elisp
(straight-use-package 'diminish)
(require 'diminish)
(diminish 'anzu-mode)
(diminish 'ivy-mode)
(diminish 'rainbow-mode)
(diminish 'eldoc-mode)
(diminish 'projectile-mode)
(diminish 'blacken-mode)
(diminish 'python-black-on-save-mode)
(diminish 'which-key-mode)
(diminish 'flycheck-mode)
(add-hook 'undo-tree-mode-hook (lambda () (diminish 'undo-tree-mode)))
(diminish 'auto-revert-mode)
(diminish 'beacon-mode)
(diminish 'all-the-icons-dired-mode)

(straight-use-package 'blackout)
(require 'blackout)
(blackout 'ivy-mode)
(blackout 'company-posframe-mode)
(blackout 'company-mode)
(diminish 'yas-mode)
(blackout 'yas-minor-mode)
(blackout 'rainbow-mode)
(blackout 'which-key-mode)
(blackout 'projectile-mode)
(blackout 'git-gutter-mode)
(blackout 'git-gutter+-mode)
(blackout 'highlight-indent-guides-mode)
(blackout 'goggles-mode)
(blackout 'org-roam-mode)
(blackout 'polymode)
(blackout 'poly-org-mode)
(blackout 'smartparens-mode)
(blackout 'visual-line-mode)
(blackout 'anzu-mode)
(blackout 'apheleia-mode)
(blackout 'explain-pause-mode)
(blackout 'volatile-highlights-mode)
(blackout 'all-the-icons-dired-mode)
(blackout 'jupyter-repl-interaction-mode)
(blackout 'page-break-lines-mode)
(blackout 'org-src-mode)
(blackout 'whole-line-or-region-local-mode)
(blackout 'smartparens-mode)


(diminish 'jupyter-repl-interaction-mode)
(diminish 'page-break-lines-mode)
(diminish 'org-src-mode)

;; (straight-use-package 'powerline)
;; (require 'powerline)
;; (powerline-default-theme)
;; (powerline-revert)

;; (straight-use-package 'spaceline)
;; (spaceline-emacs-theme)

(straight-use-package 'telephone-line)
(setq telephone-line-lhs
      '((evil . (telephone-line-evil-tag-segment))
        (accent
         .
         (telephone-line-vc-segment
          telephone-line-erc-modified-channels-segment
          telephone-line-process-segment))
        (nil
         .
         (telephone-line-minor-mode-segment
          telephone-line-buffer-segment))))
(setq telephone-line-rhs
      '((nil . (telephone-line-misc-info-segment))
        (accent . (telephone-line-major-mode-segment))
        (evil . (telephone-line-airline-position-segment))))
(telephone-line-mode t)


(provide 'modeline-settings)

;; (defun custom-modeline-mode-icon ()
;;   (format " %s"
;;     (propertize icon
;;                 'help-echo (format "Major-mode: `%s`" major-mode)
;;                 'face `(:height 1.2 :family ,(all-the-icons-icon-family-for-buffer)))))

;; (defun custom-modeline-region-info ()
;;   (when mark-active
;;     (let ((words (count-lines (region-beginning) (region-end)))
;;           (chars (count-words (region-end) (region-beginning))))
;;       (concat
;;        (propertize (format "   %s" (all-the-icons-octicon "pencil") words chars)
;;                    'face `(:family ,(all-the-icons-octicon-family))
;;                    'display '(raise -0.0))
;;        (propertize (format " (%s, %s)" words chars)
;;                    'face `(:height 0.9))))))

;; (defun custom-modeline-flycheck-status ()
;;   (let* ((text (pcase flycheck-last-status-change
;;                 (`finished (if flycheck-current-errors
;;                                (let ((count (let-alist (flycheck-count-errors flycheck-current-errors)
;;                                               (+ (or .warning 0) (or .error 0)))))
;;                                  (format "✖ %s Issue%s" count (unless (eq 1 count) "s")))
;;                              "✔ No Issues"))
;;                 (`running     "⟲ Running")
;;                 (`no-checker  "⚠ No Checker")
;;                 (`not-checked "✖ Disabled")
;;                 (`errored     "⚠ Error")
;;                 (`interrupted "⛔ Interrupted")
;;                 (`suspicious  ""))))
;;      (propertize text
;;                  'help-echo "Show Flycheck Errors"
;;                  'mouse-face '(:box 1)
;;                  'local-map (make-mode-line-mouse-map
;;                              'mouse-1 (lambda () (interactive) (flycheck-list-errors))))))

;; (defun -custom-modeline-github-vc ()
;;   (let ((branch (mapconcat 'concat (cdr (split-string vc-mode "[:-]")) "-")))
;;     (concat
;;      (propertize (format " %s" (all-the-icons-alltheicon "git")) 'face `(:height 1.2) 'display '(raise -0.1))
;;      " · "
;;      (propertize (format "%s" (all-the-icons-octicon "git-branch"))
;;                  'face `(:height 1.3 :family ,(all-the-icons-octicon-family))
;;                  'display '(raise -0.1))
;;      (propertize (format " %s" branch) 'face `(:height 0.9)))))

;; (defun -custom-modeline-svn-vc ()
;;   (let ((revision (cadr (split-string vc-mode "-"))))
;;     (concat
;;      (propertize (format " %s" (all-the-icons-faicon "cloud")) 'face `(:height 1.2) 'display '(raise -0.1))
;;      (propertize (format " · %s" revision) 'face `(:height 0.9)))))

;; (defun custom-modeline-icon-vc ()
;;   (when vc-mode
;;     (cond
;;       ((string-match "Git[:-]" vc-mode) (-custom-modeline-github-vc))
;;       ((string-match "SVN-" vc-mode) (-custom-modeline-svn-vc))
;;       (t (format "%s" vc-mode)))))


;; (setq mode-line-format '("%e" (:eval 
;;   (concat
;;     ;; (custom-modeline-modified)
;;     ;; (custom-modeline-window-number)
;;     (custom-modeline-mode-icon)
;;     (custom-modeline-icon-vc)
;;     (custom-modeline-region-info)
;;     (custom-modeline-flycheck-status)
;;     ;; (custom-modeline-suntime)
;;     ;; (custom-modeline-weather)
;;     ;; (custom-modeline-time)
;;     ))))
#+END_SRC
