* TRAMP
** General Settings
#+begin_src emacs-lisp :load yes
(setq enable-remote-dir-locals 't)
(setq tramp-chunksize 4050)
(setq tramp-verbose 10)
(setq vc-ignore-dir-regexp (format "\\(%s\\)\\|\\(%s\\)"
                                   vc-ignore-dir-regexp
                                   tramp-file-name-regexp))
#+end_src
** Find file Projectile slowdown
#+begin_src emacs-lisp :load yes
(setq projectile-ignored-project-function
      (lambda (project-root)
        (string-match-p tramp-file-name-regexp project-root)))
#+end_src
** Local PATH
#+begin_src emacs-lisp :load yes
(defun my-setup-tramp-path ()
  (let ((local-path (cdr (assoc 'my-project-specific-path dir-local-variables-alist))))
    (when local-path
      (add-to-list 'tramp-remote-path
                   (concat "/sshx:your_username@remote_host:" local-path)))))
(add-hook 'hack-dir-local-variables-hook #'my-setup-tramp-path)
#+end_src
** Eglot
#+begin_src emacs-lisp :load yes
(defun my/eglot-project-function (dir)
  "Custom project function for Eglot that avoids using Projectile for remote directories."
  (if (file-remote-p dir)
      (cons 'transient dir)  ; Treat remote dirs as transient projects
    (project-try-vc dir)))   ; Use VC-based detection for local dirs

(setq eglot-project-function #'my/eglot-project-function)
#+end_src
** Lock files
Disable lock files in TRAMP
#+begin_src emacs-lisp :load yes
(defun my-tramp-file-name-handler (operation &rest args)
  "Disable file locks for TRAMP files."
  (if (eq operation 'vc-registered)
      nil
    (let ((file-name-handler-alist
           (remove (cons "\\`/\\(ssh\\|scp\\|ftp\\):" 'my-tramp-file-name-handler)
                   file-name-handler-alist)))
      (apply operation args))))

(add-to-list 'file-name-handler-alist
             '("\\`/\\(ssh\\|scp\\|ftp\\):" . my-tramp-file-name-handler))
#+end_src

** Dir-locals helper function
I'm still trying to make all my editing features work inside TRAMP with Emacs.

#+begin_src emacs-lisp :load no
(defun set-remote-venv-path ()
  "Set PATH for TRAMP to include the venv/bin directory."
  (with-parsed-tramp-file-name default-directory tramp-info
    (let* ((absolute-local-directory (if (string= tramp-info-localname "~/")
                                         (tramp-call-process tramp-info-method tramp-info-user tramp-info-host "pwd" nil t nil)
                                       tramp-info-localname))
           (remote-path (concat "/" tramp-info-method ":" tramp-info-user "@" tramp-info-host ":" absolute-local-directory)))
      (set (make-local-variable 'process-environment)
           (append
            (list (format "PATH=%svenv/bin:%s"
                          remote-path
                          (getenv "PATH")))
            process-environment)))))
#+end_src


#+begin_src emacs-lisp :load no
(defun set-remote-venv-path ()
  "Set PATH for TRAMP to include the venv/bin directory."
  (with-parsed-tramp-file-name default-directory tramp-info
    (let ((remote-path (if (string= tramp-info-localname "~/")
                           (concat "/" tramp-info-method ":" tramp-info-user "@" tramp-info-host ":/")
                         (concat "/" tramp-info-method ":" tramp-info-user "@" tramp-info-host ":" tramp-info-localname))))
      (set (make-local-variable 'process-environment)
           (append
            (list (format "PATH=%svenv/bin:%s"
                          remote-path
                          (getenv "PATH")))
            process-environment)))))
#+end_src
** Direnv in Tramp
[[https://github.com/eush77/dotfiles/blob/ace2b1dc0f229b4897d60728a320a8f88722e0c4/emacs/.emacs.d/config/config-direnv.el#L28-L52][Code exists in an unmerged branch]].
#+begin_src emacs-lisp :load yes
(defcustom my-direnv-enabled-hosts nil
  "List of remote hosts to use Direnv on.

Each host must have `direnv' executable accessible in the default
environment."
  :type '(repeat string)
  :group 'my)

(defun tramp-sh-handle-start-file-process@my-direnv (args)
  "Enable Direnv for hosts in `my-direnv-enabled-hosts'."
  (with-parsed-tramp-file-name
   (expand-file-name default-directory) nil
   (if (member host my-direnv-enabled-hosts)
       (progn (pcase-let ((`(,name ,buffer ,program . ,args) args))
         `(,name ,buffer "direnv" "exec" ,localname ,program ,@args)) (debug))
     args)))

(with-eval-after-load "tramp-sh"
  (advice-add
   'tramp-sh-handle-start-file-process
   :filter-args #'tramp-sh-handle-start-file-process@my-direnv))
#+end_src
** Sudo editing shortcut
#+begin_src emacs-lisp :load yes
(defun edit-current-file-as-root ()
  "Reopen the current file as root."
  (interactive)
  (let ((file (buffer-file-name)))
    (if (not (file-writable-p file))
        (find-file (concat "/sudo::" file))
      (message "File is already writable"))))
#+end_src

** Vertico improvements
#+begin_src emacs-lisp :load yes
(defun basic-remote-try-completion (string table pred point)
  (and (vertico--remote-p string)
       (completion-basic-try-completion string table pred point)))
(defun basic-remote-all-completions (string table pred point)
  (and (vertico--remote-p string)
       (completion-basic-all-completions string table pred point)))
(add-to-list
 'completion-styles-alist
 '(basic-remote
   basic-remote-try-completion basic-remote-all-completions nil))
(setq
 completion-styles '(orderless basic)
 completion-category-defaults nil
 completion-category-overrides '((file (styles basic-remote partial-completion))))
;; (defun my-filtered-tramp-ssh-completions ()
;;   "Filter TRAMP completions to exclude specific patterns."
;;   (let ((completions
;;          (tramp-completion-handle-file-name-all-completions "")))
;;     (debug)
;;     (seq-filter
;;      (lambda (c)
;;        (not
;;         (or (string-suffix-p ".workspace" c)
;;             (string-suffix-p "." c)
;;             (member c '("github.com" "gitlab.com")))))
;;      completions)))

;; ;; Append the custom completion function without overwriting existing handlers
;; (let ((existing-handler
;;        (assoc
;;         'tramp-completion-file-name-handler
;;         tramp-completion-function-alist)))
;;   (if existing-handler
;;       (setcdr existing-handler 'my-filtered-tramp-ssh-completions)
;;     (setq tramp-completion-function-alist
;;           (append
;;            tramp-completion-function-alist
;;            (list
;;             (cons
;;              'tramp-completion-file-name-handler
;;              'my-filtered-tramp-ssh-completions))))))
#+end_src
